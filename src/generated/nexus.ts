/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as prisma from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CardWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Card: prisma.Card;
  Mutation: {};
  Query: {};
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  CardWhereUniqueInput: NexusGenInputs['CardWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Card: { // field return type
    dateCreated: string; // String!
    description: string; // String!
    id: string; // String!
    image: string | null; // String
    keywords: string[]; // [String!]!
    source: string; // String!
    title: string; // String!
  }
  Mutation: { // field return type
    createCard: NexusGenRootTypes['Card']; // Card!
    deleteOneCard: NexusGenRootTypes['Card'] | null; // Card
    updateCard: NexusGenRootTypes['Card']; // Card!
  }
  Query: { // field return type
    Card: NexusGenRootTypes['Card'][]; // [Card!]!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCard: { // args
      description?: string | null; // String
      source?: string | null; // String
      title: string; // String!
    }
    deleteOneCard: { // args
      where: NexusGenInputs['CardWhereUniqueInput']; // CardWhereUniqueInput!
    }
    updateCard: { // args
      description?: string | null; // String
      id?: string | null; // ID
      source?: string | null; // String
      title?: string | null; // String
    }
  }
  Query: {
    Card: { // args
      searchString?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Card" | "Mutation" | "Query";

export type NexusGenInputNames = "CardWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}